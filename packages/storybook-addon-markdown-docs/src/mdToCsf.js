/** @typedef {import('@mdjs/core').MarkdownResult} MarkdownResult */

const { transformAsync } = require('@babel/core');

const { babelPluginMdToCsf } = require('./babel-plugin-md-to-csf');
const { mdToJsx } = require('./mdToJsx');

/**
 * Creats the code to register the storybook docs page, and the markdown
 * code as JSX code.
 *
 * @param {string} filePath
 * @param {MarkdownResult} markdownResult
 */
async function createStorybookDocs(filePath, markdownResult) {
  /** @type {Record<string, string>} */
  const storyNameToKey = {};

  if (markdownResult.stories) {
    for (const { key, name } of markdownResult.stories) {
      storyNameToKey[name] = key;
    }
  }

  const jsxDocs = await mdToJsx(markdownResult.html, filePath);

  return `
    /**
     *
     * The code below is generated by storybook docs.
     *
     */

    import * as React from 'storybook-prebuilt/react.js';
    import { mdx, AddContext } from 'storybook-prebuilt/addon-docs/blocks.js';

    // Setup docs page
    const componentMeta = {};
    const mdxStoryNameToKey = ${JSON.stringify(storyNameToKey)};
    componentMeta.parameters = componentMeta.parameters || {};
    componentMeta.parameters.docs = componentMeta.parameters.docs || {};
    componentMeta.parameters.docs.page = () => <AddContext
      mdxStoryNameToKey={mdxStoryNameToKey}
      mdxComponentMeta={componentMeta}><MDXContent
    /></AddContext>;
    export default componentMeta;

    // The actual docs page, md turned into using jsx for storybook
    ${jsxDocs}
  `;
}

/**
 * Turns the JSX generated by MDX to JS, and injects user code and stories
 *
 * @param {string} storybookDocs
 * @param {string} filePath
 * @param {MarkdownResult} markdownResult
 */
async function jsxToJsWithUserCode(storybookDocs, filePath, markdownResult) {
  return transformAsync(storybookDocs, {
    filename: filePath,
    sourceMaps: true,
    plugins: [
      require.resolve('@babel/plugin-transform-react-jsx'),
      [babelPluginMdToCsf, markdownResult],
    ],
  });
}

/**
 * @param {string} filePath
 * @param {MarkdownResult} markdownResult
 */
async function mdToCsf(filePath, markdownResult) {
  const storybookDocs = await createStorybookDocs(filePath, markdownResult);
  const result = await jsxToJsWithUserCode(storybookDocs, filePath, markdownResult);

  if (!result) {
    throw new Error(`Something went wrong while generating markdown docs ${filePath}`);
  }

  return result.code;
}

module.exports = {
  mdToCsf,
  // exports for testing
  createStorybookDocs,
  jsxToJsWithUserCode,
};
