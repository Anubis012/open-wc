/** @typedef {import('@mdjs/core').MarkdownResult} MarkdownResult */
/** @typedef {import('@mdjs/core').Story} Story */
/** @typedef {import('@babel/core').types.File} File */

const {
  isExportDefaultDeclaration,
  isExpression,
  variableDeclaration,
  variableDeclarator,
  identifier,
} = require('@babel/core').types;
const { transformAsync } = require('@babel/core');
const { default: generate } = require('@babel/generator');

const { mdToJsx } = require('./mdToJsx');

/**
 * Creats the code to register the storybook docs page, and the markdown
 * code as JSX code.
 *
 * @param {string} filePath
 * @param {MarkdownResult} markdownResult
 * @returns {Promise<string>}
 */
async function createStorybookDocs(filePath, markdownResult) {
  /** @type {Record<string, string>} */
  const storyNameToKey = {};

  if (markdownResult.stories) {
    for (const { key, name } of markdownResult.stories) {
      storyNameToKey[name] = key;
    }
  }

  const jsxDocs = await mdToJsx(markdownResult.html, filePath);

  return `
    /**
     *
     * The code below is generated by storybook docs.
     *
     */

    import * as React from 'storybook-prebuilt/react.js';
    import { mdx, AddContext } from 'storybook-prebuilt/addon-docs/blocks.js';

    // Setup docs page
    const mdxStoryNameToKey = ${JSON.stringify(storyNameToKey)};
    __export_default__.parameters = __export_default__.parameters || {};
    __export_default__.parameters.docs = __export_default__.parameters.docs || {};
    __export_default__.parameters.docs.page = () => <AddContext
      mdxStoryNameToKey={mdxStoryNameToKey}
      mdxComponentMeta={__export_default__}><MDXContent
    /></AddContext>;
    export default __export_default__;

    // The actual docs page, md turned into using jsx for storybook
    ${jsxDocs}
  `;
}

/**
 * Turns the JSX generated by MDX to JS.
 *
 * @param {string} storybookDocs
 * @param {string} filePath
 * @returns {Promise<string>}
 */
async function jsxToJs(storybookDocs, filePath) {
  const result = await transformAsync(storybookDocs, {
    filename: filePath,
    sourceMaps: true,
    plugins: [require.resolve('@babel/plugin-transform-react-jsx')],
  });
  if (!result) {
    throw new Error(`Something went wrong when compiling ${filePath}`);
  }
  return result.code;
}

/**
 * @param {Story[]} stories
 * @returns {string}
 */
function createStories(stories) {
  let code = '';
  for (const story of stories.slice().reverse()) {
    const { key, name, displayedCode } = story;
    code += displayedCode;
    code +=
      `${key}.story = ${key}.story || {};\n` +
      `${name ? `${key}.story.name = ${JSON.stringify(name)};` : ''}\n` +
      `${key}.story.parameters = ${key}.story.parameters || {};\n` +
      `${key}.story.parameters.mdxSource = ${JSON.stringify(displayedCode.trim())};\n`;
  }
  return code;
}

/**
 * @param {File} [file]
 * @returns {string}
 */
function createUserCode(file) {
  // ensure there is a default export
  if (!file) {
    throw new Error('TODO: code frame');
  }

  const code = file.program.body;
  const [defaultExport] = code.filter(n => isExportDefaultDeclaration(n));
  if (!defaultExport || !isExportDefaultDeclaration(defaultExport)) {
    throw new Error('TODO code frame');
    // throw new Error('Markdown must have a default export');
  }

  if (!isExpression(defaultExport.declaration)) {
    // TODO: Can we handle non-expressions?
    throw new Error('TODO code frame');
    // throw new Error('Default export should be an expression');
  }

  // replace the user's default export with a variable, so that we can add it to the storybook
  // default export later
  const defaultExportReplacement = variableDeclaration('const', [
    variableDeclarator(identifier('__export_default__'), defaultExport.declaration),
  ]);
  code.splice(code.indexOf(defaultExport), 1, defaultExportReplacement);

  return generate(file).code;
}

/**
 * @param {string} filePath
 * @param {MarkdownResult} markdownResult
 * @returns {Promise<string>}
 */
async function mdToCsf(filePath, markdownResult) {
  const userCode = createUserCode(markdownResult.jsAst);
  const stories = createStories(markdownResult.stories);
  const docsJsx = await createStorybookDocs(filePath, markdownResult);
  const docs = await jsxToJs(docsJsx, filePath);

  return `${userCode}\n${stories}\n${docs}`;
}

module.exports = {
  mdToCsf,
  // exports for testing
  createStorybookDocs,
  jsxToJs,
};
