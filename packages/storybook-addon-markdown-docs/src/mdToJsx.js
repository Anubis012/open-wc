/** @typedef {import('@mdjs/core').MarkdownResult} MarkdownResult */

const mdx = require('@mdx-js/mdx');
const mdxToJsx = require('@mdx-js/mdx/mdx-hast-to-jsx');

/**
 * Turns MD into JSX using the MDX compiler. This is necessary because most of the
 * regular storybook docs functionality relies on JSX and MDX specifics
 *
 * @param {string} html
 * @param {MarkdownResult} markdownResult
 * @returns {Promise<string>}
 */
async function mdToJsx(filepath, markdownResult) {
  /** @type {Record<string, string>} */
  const storyNameToKey = {};

  if (markdownResult.stories) {
    for (const { key, name } of markdownResult.stories) {
      storyNameToKey[name] = key;
    }
  }

  const jsxDocs = await mdx(
    `import { Story, Preview } from 'storybook-prebuilt/addon-docs/blocks.js';\n\n${markdownResult.html}`,
    {
      compilers: [
        // custom mdx compiler which ensures mdx doesn't add a default export,
        // we don't need it because we are adding our own
        function mdxCompiler() {
          // @ts-ignore
          this.Compiler = tree => mdxToJsx.toJSX(tree, {}, { skipExport: true });
        },
      ],
      filepath,
    },
  );

  return `
    /**
     *
     * The code below is generated by storybook docs.
     *
     */

    import * as React from 'storybook-prebuilt/react.js';
    import { mdx, AddContext } from 'storybook-prebuilt/addon-docs/blocks.js';

    // Setup docs page
    const mdxStoryNameToKey = ${JSON.stringify(storyNameToKey)};
    __export_default__.parameters = __export_default__.parameters || {};
    __export_default__.parameters.docs = __export_default__.parameters.docs || {};
    __export_default__.parameters.docs.page = () => <AddContext
      mdxStoryNameToKey={mdxStoryNameToKey}
      mdxComponentMeta={__export_default__}><MDXContent
    /></AddContext>;
    export default __export_default__;

    // The actual docs page, md turned into using jsx for storybook
    ${jsxDocs}
  `;
}

module.exports = { mdToJsx };
